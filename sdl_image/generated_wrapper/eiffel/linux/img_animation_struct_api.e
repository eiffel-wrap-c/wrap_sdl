note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class IMG_ANIMATION_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	w: INTEGER
			-- Access member `w`
		require
			exists: exists
		do
			Result := c_w (item)
		ensure
			result_correct: Result = c_w (item)
		end

	set_w (a_value: INTEGER) 
			-- Change the value of member `w` to `a_value`.
		require
			exists: exists
		do
			set_c_w (item, a_value)
		ensure
			w_set: a_value = w
		end

	h: INTEGER
			-- Access member `h`
		require
			exists: exists
		do
			Result := c_h (item)
		ensure
			result_correct: Result = c_h (item)
		end

	set_h (a_value: INTEGER) 
			-- Change the value of member `h` to `a_value`.
		require
			exists: exists
		do
			set_c_h (item, a_value)
		ensure
			h_set: a_value = h
		end

	count: INTEGER
			-- Access member `count`
		require
			exists: exists
		do
			Result := c_count (item)
		ensure
			result_correct: Result = c_count (item)
		end

	set_count (a_value: INTEGER) 
			-- Change the value of member `count` to `a_value`.
		require
			exists: exists
		do
			set_c_count (item, a_value)
		ensure
			count_set: a_value = count
		end

	frames: SDL_SURFACE_STRUCT_API
			-- Access member `frames`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_frames(item) )
		ensure
			result_not_void: Result.item = c_frames (item) 
		end

	set_frames (a_value: SDL_SURFACE_STRUCT_API) 
			-- Set member `frames`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_frames (item, a_value.item)
		ensure
			frames_set: frames.item = a_value.item
		end

	delays: POINTER
			-- Access member `delays`
		require
			exists: exists
		do
			Result := c_delays (item)
		ensure
			result_correct: Result = c_delays (item)
		end

	set_delays (a_value: POINTER) 
			-- Change the value of member `delays` to `a_value`.
		require
			exists: exists
		do
			set_c_delays (item, a_value)
		ensure
			delays_set: a_value = delays
		end

feature {NONE} -- Implementation wrapper for struct IMG_Animation

	sizeof_external: INTEGER 
		external
			"C inline use <SDL_image.h>"
		alias
			"sizeof(IMG_Animation)"
		end

	c_w (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->w
			]"
		end

	set_c_w (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->w =  (int)$a_value
			]"
		ensure
			w_set: a_value = c_w (an_item)
		end

	c_h (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->h
			]"
		end

	set_c_h (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->h =  (int)$a_value
			]"
		ensure
			h_set: a_value = c_h (an_item)
		end

	c_count (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->count
			]"
		end

	set_c_count (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->count =  (int)$a_value
			]"
		ensure
			count_set: a_value = c_count (an_item)
		end

	c_frames (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->frames
			]"
		end

	set_c_frames (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->frames =  (SDL_Surface**)$a_value
			]"
		ensure
			frames_set: a_value = c_frames (an_item)
		end

	c_delays (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->delays
			]"
		end

	set_c_delays (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				((IMG_Animation*)$an_item)->delays =  (int*)$a_value
			]"
		ensure
			delays_set: a_value = c_delays (an_item)
		end

end
