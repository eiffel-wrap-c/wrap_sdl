note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class SDL_IMAGE_FUNCTIONS_API


feature -- Access

	img_linked_version: detachable SDL_VERSION_STRUCT_API 
		do
			if attached c_img_linked_version as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_init (flags: INTEGER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_Init ((int)$flags);
			]"
		end

	img_quit
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				IMG_Quit ();
			]"
		end

	img_load_typed_rw (src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER; type: STRING_8): detachable SDL_SURFACE_STRUCT_API 
		local
			type_c_string: C_STRING
		do
			create type_c_string.make (type)
			if attached c_img_load_typed_rw (src.item, freesrc, type_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load (file: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_Load ((char const*)$file);
			]"
		end

	img_load_rw (src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_rw (src.item, freesrc) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_texture (renderer: SDL_RENDERER_STRUCT_API; file: STRING_8): detachable SDL_TEXTURE_STRUCT_API 
		local
			file_c_string: C_STRING
		do
			create file_c_string.make (file)
			if attached c_img_load_texture (renderer.item, file_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_texture_rw (renderer: SDL_RENDERER_STRUCT_API; src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER): detachable SDL_TEXTURE_STRUCT_API 
		do
			if attached c_img_load_texture_rw (renderer.item, src.item, freesrc) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_texture_typed_rw (renderer: SDL_RENDERER_STRUCT_API; src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER; type: STRING_8): detachable SDL_TEXTURE_STRUCT_API 
		local
			type_c_string: C_STRING
		do
			create type_c_string.make (type)
			if attached c_img_load_texture_typed_rw (renderer.item, src.item, freesrc, type_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_is_ico (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_ico (src.item)
		ensure
			instance_free: class
		end

	img_is_cur (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_cur (src.item)
		ensure
			instance_free: class
		end

	img_is_bmp (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_bmp (src.item)
		ensure
			instance_free: class
		end

	img_is_gif (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_gif (src.item)
		ensure
			instance_free: class
		end

	img_is_jpg (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_jpg (src.item)
		ensure
			instance_free: class
		end

	img_is_lbm (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_lbm (src.item)
		ensure
			instance_free: class
		end

	img_is_pcx (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_pcx (src.item)
		ensure
			instance_free: class
		end

	img_is_png (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_png (src.item)
		ensure
			instance_free: class
		end

	img_is_pnm (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_pnm (src.item)
		ensure
			instance_free: class
		end

	img_is_svg (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_svg (src.item)
		ensure
			instance_free: class
		end

	img_is_tif (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_tif (src.item)
		ensure
			instance_free: class
		end

	img_is_xcf (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_xcf (src.item)
		ensure
			instance_free: class
		end

	img_is_xpm (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_xpm (src.item)
		ensure
			instance_free: class
		end

	img_is_xv (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_xv (src.item)
		ensure
			instance_free: class
		end

	img_is_webp (src: SDL_RWOPS_STRUCT_API): INTEGER 
		do
			Result := c_img_is_webp (src.item)
		ensure
			instance_free: class
		end

	img_load_ico_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_ico_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_cur_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_cur_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_bmp_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_bmp_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_gif_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_gif_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_jpg_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_jpg_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_lbm_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_lbm_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_pcx_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_pcx_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_png_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_png_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_pnm_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_pnm_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_svg_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_svg_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_tga_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_tga_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_tif_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_tif_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_xcf_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_xcf_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_xpm_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_xpm_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_xv_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_xv_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_webp_rw (src: SDL_RWOPS_STRUCT_API): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_load_webp_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_read_xpmfrom_array (xpm: POINTER): detachable SDL_SURFACE_STRUCT_API 
		do
			if attached c_img_read_xpmfrom_array (xpm) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_save_png (surface: SDL_SURFACE_STRUCT_API; file: STRING_8): INTEGER 
		local
			file_c_string: C_STRING
		do
			create file_c_string.make (file)
			Result := c_img_save_png (surface.item, file_c_string.item)
		ensure
			instance_free: class
		end

	img_save_png_rw (surface: SDL_SURFACE_STRUCT_API; dst: SDL_RWOPS_STRUCT_API; freedst: INTEGER): INTEGER 
		do
			Result := c_img_save_png_rw (surface.item, dst.item, freedst)
		ensure
			instance_free: class
		end

	img_save_jpg (surface: SDL_SURFACE_STRUCT_API; file: STRING_8; quality: INTEGER): INTEGER 
		local
			file_c_string: C_STRING
		do
			create file_c_string.make (file)
			Result := c_img_save_jpg (surface.item, file_c_string.item, quality)
		ensure
			instance_free: class
		end

	img_save_jpg_rw (surface: SDL_SURFACE_STRUCT_API; dst: SDL_RWOPS_STRUCT_API; freedst: INTEGER; quality: INTEGER): INTEGER 
		do
			Result := c_img_save_jpg_rw (surface.item, dst.item, freedst, quality)
		ensure
			instance_free: class
		end

	img_load_animation (file: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadAnimation ((char const*)$file);
			]"
		end

	img_load_animation_rw (src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER): detachable IMG_ANIMATION_STRUCT_API 
		do
			if attached c_img_load_animation_rw (src.item, freesrc) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_load_animation_typed_rw (src: SDL_RWOPS_STRUCT_API; freesrc: INTEGER; type: STRING_8): detachable IMG_ANIMATION_STRUCT_API 
		local
			type_c_string: C_STRING
		do
			create type_c_string.make (type)
			if attached c_img_load_animation_typed_rw (src.item, freesrc, type_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	img_free_animation (anim: IMG_ANIMATION_STRUCT_API) 
		do
			c_img_free_animation (anim.item)
		ensure
			instance_free: class
		end

	img_load_gifanimation_rw (src: SDL_RWOPS_STRUCT_API): detachable IMG_ANIMATION_STRUCT_API 
		do
			if attached c_img_load_gifanimation_rw (src.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

feature -- Externals

	c_img_linked_version: POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_Linked_Version ();
			]"
		end

	c_img_load_typed_rw (src: POINTER; freesrc: INTEGER; type: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTyped_RW ((SDL_RWops*)$src, (int)$freesrc, (char const*)$type);
			]"
		end

	c_img_load_rw (src: POINTER; freesrc: INTEGER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_Load_RW ((SDL_RWops*)$src, (int)$freesrc);
			]"
		end

	c_img_load_texture (renderer: POINTER; file: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTexture ((SDL_Renderer*)$renderer, (char const*)$file);
			]"
		end

	c_img_load_texture_rw (renderer: POINTER; src: POINTER; freesrc: INTEGER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTexture_RW ((SDL_Renderer*)$renderer, (SDL_RWops*)$src, (int)$freesrc);
			]"
		end

	c_img_load_texture_typed_rw (renderer: POINTER; src: POINTER; freesrc: INTEGER; type: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTextureTyped_RW ((SDL_Renderer*)$renderer, (SDL_RWops*)$src, (int)$freesrc, (char const*)$type);
			]"
		end

	c_img_is_ico (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isICO ((SDL_RWops*)$src);
			]"
		end

	c_img_is_cur (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isCUR ((SDL_RWops*)$src);
			]"
		end

	c_img_is_bmp (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isBMP ((SDL_RWops*)$src);
			]"
		end

	c_img_is_gif (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isGIF ((SDL_RWops*)$src);
			]"
		end

	c_img_is_jpg (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isJPG ((SDL_RWops*)$src);
			]"
		end

	c_img_is_lbm (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isLBM ((SDL_RWops*)$src);
			]"
		end

	c_img_is_pcx (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isPCX ((SDL_RWops*)$src);
			]"
		end

	c_img_is_png (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isPNG ((SDL_RWops*)$src);
			]"
		end

	c_img_is_pnm (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isPNM ((SDL_RWops*)$src);
			]"
		end

	c_img_is_svg (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isSVG ((SDL_RWops*)$src);
			]"
		end

	c_img_is_tif (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isTIF ((SDL_RWops*)$src);
			]"
		end

	c_img_is_xcf (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isXCF ((SDL_RWops*)$src);
			]"
		end

	c_img_is_xpm (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isXPM ((SDL_RWops*)$src);
			]"
		end

	c_img_is_xv (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isXV ((SDL_RWops*)$src);
			]"
		end

	c_img_is_webp (src: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_isWEBP ((SDL_RWops*)$src);
			]"
		end

	c_img_load_ico_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadICO_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_cur_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadCUR_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_bmp_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadBMP_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_gif_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadGIF_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_jpg_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadJPG_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_lbm_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadLBM_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_pcx_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadPCX_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_png_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadPNG_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_pnm_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadPNM_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_svg_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadSVG_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_tga_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTGA_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_tif_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadTIF_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_xcf_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadXCF_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_xpm_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadXPM_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_xv_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadXV_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_load_webp_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadWEBP_RW ((SDL_RWops*)$src);
			]"
		end

	c_img_read_xpmfrom_array (xpm: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_ReadXPMFromArray ((char**)$xpm);
			]"
		end

	c_img_save_png (surface: POINTER; file: POINTER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_SavePNG ((SDL_Surface*)$surface, (char const*)$file);
			]"
		end

	c_img_save_png_rw (surface: POINTER; dst: POINTER; freedst: INTEGER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_SavePNG_RW ((SDL_Surface*)$surface, (SDL_RWops*)$dst, (int)$freedst);
			]"
		end

	c_img_save_jpg (surface: POINTER; file: POINTER; quality: INTEGER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_SaveJPG ((SDL_Surface*)$surface, (char const*)$file, (int)$quality);
			]"
		end

	c_img_save_jpg_rw (surface: POINTER; dst: POINTER; freedst: INTEGER; quality: INTEGER): INTEGER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_SaveJPG_RW ((SDL_Surface*)$surface, (SDL_RWops*)$dst, (int)$freedst, (int)$quality);
			]"
		end

	c_img_load_animation_rw (src: POINTER; freesrc: INTEGER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadAnimation_RW ((SDL_RWops*)$src, (int)$freesrc);
			]"
		end

	c_img_load_animation_typed_rw (src: POINTER; freesrc: INTEGER; type: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadAnimationTyped_RW ((SDL_RWops*)$src, (int)$freesrc, (char const*)$type);
			]"
		end

	c_img_free_animation (anim: POINTER)
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				IMG_FreeAnimation ((IMG_Animation*)$anim);
			]"
		end

	c_img_load_gifanimation_rw (src: POINTER): POINTER
		external
			"C inline use <SDL_image.h>"
		alias
			"[
				return IMG_LoadGIFAnimation_RW ((SDL_RWops*)$src);
			]"
		end

feature -- Externals Address

end
