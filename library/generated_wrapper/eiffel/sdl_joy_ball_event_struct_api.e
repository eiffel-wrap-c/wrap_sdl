note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SDL_JOY_BALL_EVENT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	timestamp: INTEGER
			-- Access member `timestamp`
		require
			exists: exists
		do
			Result := c_timestamp (item)
		ensure
			result_correct: Result = c_timestamp (item)
		end

	set_timestamp (a_value: INTEGER) 
			-- Change the value of member `timestamp` to `a_value`.
		require
			exists: exists
		do
			set_c_timestamp (item, a_value)
		ensure
			timestamp_set: a_value = timestamp
		end

	which: INTEGER
			-- Access member `which`
		require
			exists: exists
		do
			Result := c_which (item)
		ensure
			result_correct: Result = c_which (item)
		end

	set_which (a_value: INTEGER) 
			-- Change the value of member `which` to `a_value`.
		require
			exists: exists
		do
			set_c_which (item, a_value)
		ensure
			which_set: a_value = which
		end

	ball: INTEGER
			-- Access member `ball`
		require
			exists: exists
		do
			Result := c_ball (item)
		ensure
			result_correct: Result = c_ball (item)
		end

	set_ball (a_value: INTEGER) 
			-- Change the value of member `ball` to `a_value`.
		require
			exists: exists
		do
			set_c_ball (item, a_value)
		ensure
			ball_set: a_value = ball
		end

	padding1: INTEGER
			-- Access member `padding1`
		require
			exists: exists
		do
			Result := c_padding1 (item)
		ensure
			result_correct: Result = c_padding1 (item)
		end

	set_padding1 (a_value: INTEGER) 
			-- Change the value of member `padding1` to `a_value`.
		require
			exists: exists
		do
			set_c_padding1 (item, a_value)
		ensure
			padding1_set: a_value = padding1
		end

	padding2: INTEGER
			-- Access member `padding2`
		require
			exists: exists
		do
			Result := c_padding2 (item)
		ensure
			result_correct: Result = c_padding2 (item)
		end

	set_padding2 (a_value: INTEGER) 
			-- Change the value of member `padding2` to `a_value`.
		require
			exists: exists
		do
			set_c_padding2 (item, a_value)
		ensure
			padding2_set: a_value = padding2
		end

	padding3: INTEGER
			-- Access member `padding3`
		require
			exists: exists
		do
			Result := c_padding3 (item)
		ensure
			result_correct: Result = c_padding3 (item)
		end

	set_padding3 (a_value: INTEGER) 
			-- Change the value of member `padding3` to `a_value`.
		require
			exists: exists
		do
			set_c_padding3 (item, a_value)
		ensure
			padding3_set: a_value = padding3
		end

	xrel: INTEGER
			-- Access member `xrel`
		require
			exists: exists
		do
			Result := c_xrel (item)
		ensure
			result_correct: Result = c_xrel (item)
		end

	set_xrel (a_value: INTEGER) 
			-- Change the value of member `xrel` to `a_value`.
		require
			exists: exists
		do
			set_c_xrel (item, a_value)
		ensure
			xrel_set: a_value = xrel
		end

	yrel: INTEGER
			-- Access member `yrel`
		require
			exists: exists
		do
			Result := c_yrel (item)
		ensure
			result_correct: Result = c_yrel (item)
		end

	set_yrel (a_value: INTEGER) 
			-- Change the value of member `yrel` to `a_value`.
		require
			exists: exists
		do
			set_c_yrel (item, a_value)
		ensure
			yrel_set: a_value = yrel
		end

feature {NONE} -- Implementation wrapper for struct struct SDL_JoyBallEvent

	sizeof_external: INTEGER 
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_JoyBallEvent)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->type =  (Uint32)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_timestamp (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->timestamp
			]"
		end

	set_c_timestamp (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->timestamp =  (Uint32)$a_value
			]"
		ensure
			timestamp_set: a_value = c_timestamp (an_item)
		end

	c_which (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->which
			]"
		end

	set_c_which (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->which =  (SDL_JoystickID)$a_value
			]"
		ensure
			which_set: a_value = c_which (an_item)
		end

	c_ball (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->ball
			]"
		end

	set_c_ball (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->ball =  (Uint8)$a_value
			]"
		ensure
			ball_set: a_value = c_ball (an_item)
		end

	c_padding1 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding1
			]"
		end

	set_c_padding1 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding1 =  (Uint8)$a_value
			]"
		ensure
			padding1_set: a_value = c_padding1 (an_item)
		end

	c_padding2 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding2
			]"
		end

	set_c_padding2 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding2 =  (Uint8)$a_value
			]"
		ensure
			padding2_set: a_value = c_padding2 (an_item)
		end

	c_padding3 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding3
			]"
		end

	set_c_padding3 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->padding3 =  (Uint8)$a_value
			]"
		ensure
			padding3_set: a_value = c_padding3 (an_item)
		end

	c_xrel (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->xrel
			]"
		end

	set_c_xrel (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->xrel =  (Sint16)$a_value
			]"
		ensure
			xrel_set: a_value = c_xrel (an_item)
		end

	c_yrel (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->yrel
			]"
		end

	set_c_yrel (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_JoyBallEvent*)$an_item)->yrel =  (Sint16)$a_value
			]"
		ensure
			yrel_set: a_value = c_yrel (an_item)
		end

end
