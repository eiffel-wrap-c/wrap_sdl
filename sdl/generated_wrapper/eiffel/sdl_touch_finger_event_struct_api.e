note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SDL_TOUCH_FINGER_EVENT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: NATURAL
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: NATURAL) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	timestamp: NATURAL
			-- Access member `timestamp`
		require
			exists: exists
		do
			Result := c_timestamp (item)
		ensure
			result_correct: Result = c_timestamp (item)
		end

	set_timestamp (a_value: NATURAL) 
			-- Change the value of member `timestamp` to `a_value`.
		require
			exists: exists
		do
			set_c_timestamp (item, a_value)
		ensure
			timestamp_set: a_value = timestamp
		end

	touchid: INTEGER
			-- Access member `touchId`
		require
			exists: exists
		do
			Result := c_touchid (item)
		ensure
			result_correct: Result = c_touchid (item)
		end

	set_touchid (a_value: INTEGER) 
			-- Change the value of member `touchId` to `a_value`.
		require
			exists: exists
		do
			set_c_touchid (item, a_value)
		ensure
			touchid_set: a_value = touchid
		end

	fingerid: INTEGER
			-- Access member `fingerId`
		require
			exists: exists
		do
			Result := c_fingerid (item)
		ensure
			result_correct: Result = c_fingerid (item)
		end

	set_fingerid (a_value: INTEGER) 
			-- Change the value of member `fingerId` to `a_value`.
		require
			exists: exists
		do
			set_c_fingerid (item, a_value)
		ensure
			fingerid_set: a_value = fingerid
		end

	x: REAL
			-- Access member `x`
		require
			exists: exists
		do
			Result := c_x (item)
		ensure
			result_correct: Result = c_x (item)
		end

	set_x (a_value: REAL) 
			-- Change the value of member `x` to `a_value`.
		require
			exists: exists
		do
			set_c_x (item, a_value)
		ensure
			x_set: a_value = x
		end

	y: REAL
			-- Access member `y`
		require
			exists: exists
		do
			Result := c_y (item)
		ensure
			result_correct: Result = c_y (item)
		end

	set_y (a_value: REAL) 
			-- Change the value of member `y` to `a_value`.
		require
			exists: exists
		do
			set_c_y (item, a_value)
		ensure
			y_set: a_value = y
		end

	dx: REAL
			-- Access member `dx`
		require
			exists: exists
		do
			Result := c_dx (item)
		ensure
			result_correct: Result = c_dx (item)
		end

	set_dx (a_value: REAL) 
			-- Change the value of member `dx` to `a_value`.
		require
			exists: exists
		do
			set_c_dx (item, a_value)
		ensure
			dx_set: a_value = dx
		end

	dy: REAL
			-- Access member `dy`
		require
			exists: exists
		do
			Result := c_dy (item)
		ensure
			result_correct: Result = c_dy (item)
		end

	set_dy (a_value: REAL) 
			-- Change the value of member `dy` to `a_value`.
		require
			exists: exists
		do
			set_c_dy (item, a_value)
		ensure
			dy_set: a_value = dy
		end

	pressure: REAL
			-- Access member `pressure`
		require
			exists: exists
		do
			Result := c_pressure (item)
		ensure
			result_correct: Result = c_pressure (item)
		end

	set_pressure (a_value: REAL) 
			-- Change the value of member `pressure` to `a_value`.
		require
			exists: exists
		do
			set_c_pressure (item, a_value)
		ensure
			pressure_set: a_value = pressure
		end

	windowid: NATURAL
			-- Access member `windowID`
		require
			exists: exists
		do
			Result := c_windowid (item)
		ensure
			result_correct: Result = c_windowid (item)
		end

	set_windowid (a_value: NATURAL) 
			-- Change the value of member `windowID` to `a_value`.
		require
			exists: exists
		do
			set_c_windowid (item, a_value)
		ensure
			windowid_set: a_value = windowid
		end

feature {NONE} -- Implementation wrapper for struct struct SDL_TouchFingerEvent

	sizeof_external: INTEGER 
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_TouchFingerEvent)"
		end

	c_type (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->type =  (Uint32)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_timestamp (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->timestamp
			]"
		end

	set_c_timestamp (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->timestamp =  (Uint32)$a_value
			]"
		ensure
			timestamp_set: a_value = c_timestamp (an_item)
		end

	c_touchid (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->touchId
			]"
		end

	set_c_touchid (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->touchId =  (SDL_TouchID)$a_value
			]"
		ensure
			touchid_set: a_value = c_touchid (an_item)
		end

	c_fingerid (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->fingerId
			]"
		end

	set_c_fingerid (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->fingerId =  (SDL_FingerID)$a_value
			]"
		ensure
			fingerid_set: a_value = c_fingerid (an_item)
		end

	c_x (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->x
			]"
		end

	set_c_x (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->x =  (float)$a_value
			]"
		ensure
			x_set: a_value = c_x (an_item)
		end

	c_y (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->y
			]"
		end

	set_c_y (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->y =  (float)$a_value
			]"
		ensure
			y_set: a_value = c_y (an_item)
		end

	c_dx (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->dx
			]"
		end

	set_c_dx (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->dx =  (float)$a_value
			]"
		ensure
			dx_set: a_value = c_dx (an_item)
		end

	c_dy (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->dy
			]"
		end

	set_c_dy (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->dy =  (float)$a_value
			]"
		ensure
			dy_set: a_value = c_dy (an_item)
		end

	c_pressure (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->pressure
			]"
		end

	set_c_pressure (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->pressure =  (float)$a_value
			]"
		ensure
			pressure_set: a_value = c_pressure (an_item)
		end

	c_windowid (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->windowID
			]"
		end

	set_c_windowid (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_TouchFingerEvent*)$an_item)->windowID =  (Uint32)$a_value
			]"
		ensure
			windowid_set: a_value = c_windowid (an_item)
		end

end
