note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SDL_PIXEL_FORMAT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	format: INTEGER
			-- Access member `format`
		require
			exists: exists
		do
			Result := c_format (item)
		ensure
			result_correct: Result = c_format (item)
		end

	set_format (a_value: INTEGER) 
			-- Change the value of member `format` to `a_value`.
		require
			exists: exists
		do
			set_c_format (item, a_value)
		ensure
			format_set: a_value = format
		end

	palette: detachable SDL_PALETTE_STRUCT_API 
			-- Access member `palette`
		require
			exists: exists
		do
			if attached c_palette (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_palette (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_palette (item) 
		end

	set_palette (a_value: SDL_PALETTE_STRUCT_API) 
			-- Set member `palette`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_palette (item, a_value.item)
		ensure
			palette_set: attached palette as l_value implies l_value.item = a_value.item
		end

	bitsperpixel: INTEGER
			-- Access member `BitsPerPixel`
		require
			exists: exists
		do
			Result := c_bitsperpixel (item)
		ensure
			result_correct: Result = c_bitsperpixel (item)
		end

	set_bitsperpixel (a_value: INTEGER) 
			-- Change the value of member `BitsPerPixel` to `a_value`.
		require
			exists: exists
		do
			set_c_bitsperpixel (item, a_value)
		ensure
			bitsperpixel_set: a_value = bitsperpixel
		end

	bytesperpixel: INTEGER
			-- Access member `BytesPerPixel`
		require
			exists: exists
		do
			Result := c_bytesperpixel (item)
		ensure
			result_correct: Result = c_bytesperpixel (item)
		end

	set_bytesperpixel (a_value: INTEGER) 
			-- Change the value of member `BytesPerPixel` to `a_value`.
		require
			exists: exists
		do
			set_c_bytesperpixel (item, a_value)
		ensure
			bytesperpixel_set: a_value = bytesperpixel
		end

	padding: POINTER
			-- Access member `padding`
		require
			exists: exists
		do
			Result := c_padding (item)
		ensure
			result_correct: Result = c_padding (item)
		end

	rmask: INTEGER
			-- Access member `Rmask`
		require
			exists: exists
		do
			Result := c_rmask (item)
		ensure
			result_correct: Result = c_rmask (item)
		end

	set_rmask (a_value: INTEGER) 
			-- Change the value of member `Rmask` to `a_value`.
		require
			exists: exists
		do
			set_c_rmask (item, a_value)
		ensure
			rmask_set: a_value = rmask
		end

	gmask: INTEGER
			-- Access member `Gmask`
		require
			exists: exists
		do
			Result := c_gmask (item)
		ensure
			result_correct: Result = c_gmask (item)
		end

	set_gmask (a_value: INTEGER) 
			-- Change the value of member `Gmask` to `a_value`.
		require
			exists: exists
		do
			set_c_gmask (item, a_value)
		ensure
			gmask_set: a_value = gmask
		end

	bmask: INTEGER
			-- Access member `Bmask`
		require
			exists: exists
		do
			Result := c_bmask (item)
		ensure
			result_correct: Result = c_bmask (item)
		end

	set_bmask (a_value: INTEGER) 
			-- Change the value of member `Bmask` to `a_value`.
		require
			exists: exists
		do
			set_c_bmask (item, a_value)
		ensure
			bmask_set: a_value = bmask
		end

	amask: INTEGER
			-- Access member `Amask`
		require
			exists: exists
		do
			Result := c_amask (item)
		ensure
			result_correct: Result = c_amask (item)
		end

	set_amask (a_value: INTEGER) 
			-- Change the value of member `Amask` to `a_value`.
		require
			exists: exists
		do
			set_c_amask (item, a_value)
		ensure
			amask_set: a_value = amask
		end

	rloss: INTEGER
			-- Access member `Rloss`
		require
			exists: exists
		do
			Result := c_rloss (item)
		ensure
			result_correct: Result = c_rloss (item)
		end

	set_rloss (a_value: INTEGER) 
			-- Change the value of member `Rloss` to `a_value`.
		require
			exists: exists
		do
			set_c_rloss (item, a_value)
		ensure
			rloss_set: a_value = rloss
		end

	gloss: INTEGER
			-- Access member `Gloss`
		require
			exists: exists
		do
			Result := c_gloss (item)
		ensure
			result_correct: Result = c_gloss (item)
		end

	set_gloss (a_value: INTEGER) 
			-- Change the value of member `Gloss` to `a_value`.
		require
			exists: exists
		do
			set_c_gloss (item, a_value)
		ensure
			gloss_set: a_value = gloss
		end

	bloss: INTEGER
			-- Access member `Bloss`
		require
			exists: exists
		do
			Result := c_bloss (item)
		ensure
			result_correct: Result = c_bloss (item)
		end

	set_bloss (a_value: INTEGER) 
			-- Change the value of member `Bloss` to `a_value`.
		require
			exists: exists
		do
			set_c_bloss (item, a_value)
		ensure
			bloss_set: a_value = bloss
		end

	aloss: INTEGER
			-- Access member `Aloss`
		require
			exists: exists
		do
			Result := c_aloss (item)
		ensure
			result_correct: Result = c_aloss (item)
		end

	set_aloss (a_value: INTEGER) 
			-- Change the value of member `Aloss` to `a_value`.
		require
			exists: exists
		do
			set_c_aloss (item, a_value)
		ensure
			aloss_set: a_value = aloss
		end

	rshift: INTEGER
			-- Access member `Rshift`
		require
			exists: exists
		do
			Result := c_rshift (item)
		ensure
			result_correct: Result = c_rshift (item)
		end

	set_rshift (a_value: INTEGER) 
			-- Change the value of member `Rshift` to `a_value`.
		require
			exists: exists
		do
			set_c_rshift (item, a_value)
		ensure
			rshift_set: a_value = rshift
		end

	gshift: INTEGER
			-- Access member `Gshift`
		require
			exists: exists
		do
			Result := c_gshift (item)
		ensure
			result_correct: Result = c_gshift (item)
		end

	set_gshift (a_value: INTEGER) 
			-- Change the value of member `Gshift` to `a_value`.
		require
			exists: exists
		do
			set_c_gshift (item, a_value)
		ensure
			gshift_set: a_value = gshift
		end

	bshift: INTEGER
			-- Access member `Bshift`
		require
			exists: exists
		do
			Result := c_bshift (item)
		ensure
			result_correct: Result = c_bshift (item)
		end

	set_bshift (a_value: INTEGER) 
			-- Change the value of member `Bshift` to `a_value`.
		require
			exists: exists
		do
			set_c_bshift (item, a_value)
		ensure
			bshift_set: a_value = bshift
		end

	ashift: INTEGER
			-- Access member `Ashift`
		require
			exists: exists
		do
			Result := c_ashift (item)
		ensure
			result_correct: Result = c_ashift (item)
		end

	set_ashift (a_value: INTEGER) 
			-- Change the value of member `Ashift` to `a_value`.
		require
			exists: exists
		do
			set_c_ashift (item, a_value)
		ensure
			ashift_set: a_value = ashift
		end

	refcount: INTEGER
			-- Access member `refcount`
		require
			exists: exists
		do
			Result := c_refcount (item)
		ensure
			result_correct: Result = c_refcount (item)
		end

	set_refcount (a_value: INTEGER) 
			-- Change the value of member `refcount` to `a_value`.
		require
			exists: exists
		do
			set_c_refcount (item, a_value)
		ensure
			refcount_set: a_value = refcount
		end

	next: detachable SDL_PIXEL_FORMAT_STRUCT_API 
			-- Access member `next`
		require
			exists: exists
		do
			if attached c_next (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_next (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_next (item) 
		end

	set_next (a_value: SDL_PIXEL_FORMAT_STRUCT_API) 
			-- Set member `next`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_next (item, a_value.item)
		ensure
			next_set: attached next as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct SDL_PixelFormat

	sizeof_external: INTEGER 
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_PixelFormat)"
		end

	c_format (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->format
			]"
		end

	set_c_format (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->format =  (Uint32)$a_value
			]"
		ensure
			format_set: a_value = c_format (an_item)
		end

	c_palette (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->palette
			]"
		end

	set_c_palette (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->palette =  (SDL_Palette*)$a_value
			]"
		ensure
			palette_set: a_value = c_palette (an_item)
		end

	c_bitsperpixel (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->BitsPerPixel
			]"
		end

	set_c_bitsperpixel (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->BitsPerPixel =  (Uint8)$a_value
			]"
		ensure
			bitsperpixel_set: a_value = c_bitsperpixel (an_item)
		end

	c_bytesperpixel (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->BytesPerPixel
			]"
		end

	set_c_bytesperpixel (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->BytesPerPixel =  (Uint8)$a_value
			]"
		ensure
			bytesperpixel_set: a_value = c_bytesperpixel (an_item)
		end

	c_padding (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->padding
			]"
		end

	c_rmask (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rmask
			]"
		end

	set_c_rmask (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rmask =  (Uint32)$a_value
			]"
		ensure
			rmask_set: a_value = c_rmask (an_item)
		end

	c_gmask (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gmask
			]"
		end

	set_c_gmask (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gmask =  (Uint32)$a_value
			]"
		ensure
			gmask_set: a_value = c_gmask (an_item)
		end

	c_bmask (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bmask
			]"
		end

	set_c_bmask (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bmask =  (Uint32)$a_value
			]"
		ensure
			bmask_set: a_value = c_bmask (an_item)
		end

	c_amask (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Amask
			]"
		end

	set_c_amask (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Amask =  (Uint32)$a_value
			]"
		ensure
			amask_set: a_value = c_amask (an_item)
		end

	c_rloss (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rloss
			]"
		end

	set_c_rloss (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rloss =  (Uint8)$a_value
			]"
		ensure
			rloss_set: a_value = c_rloss (an_item)
		end

	c_gloss (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gloss
			]"
		end

	set_c_gloss (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gloss =  (Uint8)$a_value
			]"
		ensure
			gloss_set: a_value = c_gloss (an_item)
		end

	c_bloss (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bloss
			]"
		end

	set_c_bloss (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bloss =  (Uint8)$a_value
			]"
		ensure
			bloss_set: a_value = c_bloss (an_item)
		end

	c_aloss (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Aloss
			]"
		end

	set_c_aloss (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Aloss =  (Uint8)$a_value
			]"
		ensure
			aloss_set: a_value = c_aloss (an_item)
		end

	c_rshift (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rshift
			]"
		end

	set_c_rshift (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Rshift =  (Uint8)$a_value
			]"
		ensure
			rshift_set: a_value = c_rshift (an_item)
		end

	c_gshift (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gshift
			]"
		end

	set_c_gshift (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Gshift =  (Uint8)$a_value
			]"
		ensure
			gshift_set: a_value = c_gshift (an_item)
		end

	c_bshift (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bshift
			]"
		end

	set_c_bshift (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Bshift =  (Uint8)$a_value
			]"
		ensure
			bshift_set: a_value = c_bshift (an_item)
		end

	c_ashift (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Ashift
			]"
		end

	set_c_ashift (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->Ashift =  (Uint8)$a_value
			]"
		ensure
			ashift_set: a_value = c_ashift (an_item)
		end

	c_refcount (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->refcount
			]"
		end

	set_c_refcount (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->refcount =  (int)$a_value
			]"
		ensure
			refcount_set: a_value = c_refcount (an_item)
		end

	c_next (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->next
			]"
		end

	set_c_next (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_PixelFormat*)$an_item)->next =  (struct SDL_PixelFormat*)$a_value
			]"
		ensure
			next_set: a_value = c_next (an_item)
		end

end
