note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SDL_WINDOW_SHAPE_PARAMS_UNION_API

inherit

	MEMORY_STRUCTURE

create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	binarizationcutoff: INTEGER 
			-- Access member `binarizationCutoff`
		require
			exists: exists
		do
			Result := c_binarizationcutoff (item)
		ensure
			result_correct: Result = c_binarizationcutoff (item)		end

	set_binarizationcutoff (a_value: INTEGER) 
			-- Change the value of member `binarizationCutoff` to `a_value`.
		require
			exists: exists
		do
			set_c_binarizationcutoff (item, a_value)
		ensure
			binarizationcutoff_set: a_value = c_binarizationcutoff(item)
		end

	colorkey: SDL_COLOR_STRUCT_API
			-- Access member `colorKey`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_colorkey(item) )
		ensure
			result_not_void: Result.item = c_colorkey (item) 
		end

	set_colorkey (a_value: SDL_COLOR_STRUCT_API) 
			-- Set member `colorKey`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_colorkey (item, a_value.item)
		ensure
			colorkey_set: colorkey.item = a_value.item
		end

feature {NONE} --C Implementation: SDL_WindowShapeParams

	sizeof_external: INTEGER 
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(SDL_WindowShapeParams)"
		end

	c_binarizationcutoff (an_item: POINTER): INTEGER 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((SDL_WindowShapeParams*)$an_item)->binarizationCutoff
			]"
		end

	set_c_binarizationcutoff (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((SDL_WindowShapeParams*)$an_item)->binarizationCutoff =  (Uint8)$a_value;
			]"
		end

	c_colorkey (an_item: POINTER): POINTER 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				&((SDL_WindowShapeParams*)$an_item)->colorKey
			]"
		end

	set_c_colorkey (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((SDL_WindowShapeParams*)$an_item)->colorKey =  *(SDL_Color*)$a_value;
			]"
		end


end
