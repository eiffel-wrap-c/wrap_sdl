note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SDL_WINDOW_SHAPE_MODE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	mode: INTEGER
			-- Access member `mode`
		require
			exists: exists
		do
			Result := c_mode (item)
		ensure
			result_correct: Result = c_mode (item)
		end

	set_mode (a_value: INTEGER) 
			-- Change the value of member `mode` to `a_value`.
		require
			exists: exists
		do
			set_c_mode (item, a_value)
		ensure
			mode_set: a_value = mode
		end

	parameters: SDL_WINDOW_SHAPE_PARAMS_UNION_API
			-- Access member `parameters`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_parameters(item) )
		ensure
			result_not_void: Result.item = c_parameters (item) 
		end

	set_parameters (a_value: SDL_WINDOW_SHAPE_PARAMS_UNION_API) 
			-- Set member `parameters`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_parameters (item, a_value.item)
		ensure
			parameters_set: parameters.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct SDL_WindowShapeMode

	sizeof_external: INTEGER 
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_WindowShapeMode)"
		end

	c_mode (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_WindowShapeMode*)$an_item)->mode
			]"
		end

	set_c_mode (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_WindowShapeMode*)$an_item)->mode =  (WindowShapeMode)$a_value
			]"
		ensure
			mode_set: a_value = c_mode (an_item)
		end

	c_parameters (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				&((struct SDL_WindowShapeMode*)$an_item)->parameters
			]"
		end

	set_c_parameters (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_WindowShapeMode*)$an_item)->parameters =  *(SDL_WindowShapeParams*)$a_value
			]"
		end

end
